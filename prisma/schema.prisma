// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          Role      @default(USER)
  jobs          Job[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Job {
  id              Int       @id @default(autoincrement())
  status          Status    @default(TODO)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  requestor       User?      @relation(fields: [requestorId], references: [id])
  requestorId     String?
  adultFirstName  String
  adultLastName   String
  childFirstName  String?
  childLastName   String?
  description     String    @db.Text
  location        String    @db.Text
  time            String    @db.Text
  contact         String
  learn           String
  special         String?   @db.Text
  signature       String  

  @@index(requestorId)
  @@map("jobs")
}

enum Status {
  TODO
  INPROGRESS
  DONE
}


enum Role {
  STUDENTATHLETE
  USER
}