// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  phone         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(CLIENT)

  requestedJobs Job[]           @relation(name: "requestor_relation")
  assignments   JobAssignment[]

  @@map("users")
}

model Job {
  id             String   @id @default(cuid())
  status         Status   @default(TODO)
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @updatedAt @map(name: "updated_at")
  adultFirstName String   @map(name: "adult_first_name")
  adultLastName  String   @map(name: "adult_last_name")
  childFirstName String?  @map(name: "child_first_name")
  childLastName  String?  @map(name: "child_last_name")
  description    String   @db.Text
  location       String   @db.Text
  time           String   @db.Text
  estimate       String   @db.Text
  contact        String
  learn          String?
  special        String?  @db.Text
  signature      String

  requestor   User?           @relation(name: "requestor_relation", fields: [requestorId], references: [id])
  requestorId String?         @map(name: "requestor_id")
  assignments JobAssignment[]

  @@index(requestorId)
  @@map("jobs")
}

model JobAssignment {
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([jobId, userId])
  @@index([jobId])
  @@index([userId])
  @@map("job_assignments")
}

model JobReview {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  reviewerName String   @map(name: "reviewer_name")
  reviewText   String   @map(name: "review_text") @db.Text
  reviewImages Image[]  @relation(name: "review_images")

  @@map("job_reviews")
}

model Image {
  id          String    @id @default(cuid())
  uploadedAt  DateTime  @default(now()) @map(name: "uploaded_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  src         String
  alt         String
  width       Int
  height      Int
  jobReview   JobReview @relation(name: "review_images", fields: [jobReviewId], references: [id])
  jobReviewId String    @map(name: "job_review_id")

  @@index([jobReviewId])
  @@map("images")
}

enum Status {
  TODO
  INPROGRESS
  DONE
}

enum Role {
  ADMIN
  STUDENTATHLETE
  CLIENT
}
