// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  @@index(authorId)
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique

  @@index(userId)
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

// model Job {
//   id        String   @id @default(cuid())
//   adultFirstName String
//   adultLastName String
//   childFirstName String?
//   childLastName String?
//   description String
//   location String
//   time String
//   contact String
//   frequency String
//   learn String
//   special String
//   signature String  
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")
//   authorId  String

//   author User @relation(fields: [authorId], references: [id])

//   @@map(name: "jobs")
// }

// model Account {
//   id                String   @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?  @db.Text
//   access_token      String?  @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?  @db.Text
//   session_state     String?
//   createdAt         DateTime @default(now()) @map(name: "created_at")
//   updatedAt         DateTime @default(now()) @map(name: "updated_at")

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map(name: "accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map(name: "sessions")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @default(now()) @map(name: "updated_at")

//   accounts Account[]
//   sessions Session[]
//   Job     Job[]

//   stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
//   stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
//   stripePriceId          String?   @map(name: "stripe_price_id")
//   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

//   @@map(name: "users")
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map(name: "verification_tokens")
// }